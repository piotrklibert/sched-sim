#lang racket


(require 
 "utils/str.rkt")


(provide 
 
 ;; Display options
 th-width
 td-width
 
 (contract-out 
  [format-table (->* ((or/c #f (listof string?) (listof symbol?))) 
                     #:rest (listof (cons/c string? (listof any/c))) 
                     string?)]))


;;================================================================================
;;
;; Global parameters

(define th-width (make-parameter 12))
(define td-width (make-parameter 15))


;;================================================================================
;;
;; FORMAT-TABLE procedure

(define (format-table headers . rows)
  (define empty-col (make-string (th-width) #\space))
  (define header 
    (cond 
      [(eq? headers #f) 
       (begin 
         (define column-count (length (cdr (list-ref rows 0))))
         (define column-names (s:cat* (map pad%td (range column-count))))
         
         (format "~a~a\n" empty-col column-names))]
      
      [else 
       (let 
           ([sanitize (compose pad%td (no-error/1 symbol->string))])
         (format "~a~a\n" empty-col (s:cat* (map sanitize headers))))]))
  
  (define (get-rows)
    (for/list ([(name vals) (in-dict rows)])
      (define hd (s:rpad name (th-width)))
      (define cols (map pad%td vals))
      (format "~a~a\n" hd (s:cat* cols))))
  
  (s:cat* header (get-rows)))


;;================================================================================
;;
;; Helpers

(define (make-formatter . funcs)
  (define composed-fun (apply compose funcs))
  (lambda (val) 
    (composed-fun val)))

(define (no-error/1 func)
  (lambda (arg)
    (with-handlers ([any/c (Î» _ arg)])
      (func arg))))

(define pad%th (make-formatter (s:padder (th-width)) (no-error/1 number->string)))
(define pad%td (make-formatter (s:padder (td-width)) (no-error/1 number->string)))


;;================================================================================
;;
;; Tests

(module+ test
  (require rackunit)
  (define r (range 5))
  (define example1
    (s:cat "                            0              1              2              3              4\n"
           "Waiting time                0              1              2              3              4\n"
           "Remaining task              0              1              2              3              4\n"
           "Priority                    0              1              2              3              4\n"))
  
  (define example2 
    (s:cat "                            A              B       Naglowek              D              E\n"
           "Waiting time                0              1              2              3              4\n" 
           "Remaining task              0              1              2              3              4\n" 
           "Priority                    0              1              2              3              4\n"))
  
  (test-case 
   "With autogenerated headers"
   (parameterize
      ([th-width 14]
       [td-width 12])
     (check-equal? (format-table #f
                                 `("Waiting time"    . ,r)
                                 `("Remaining tasks" . ,r)
                                 `("Priority"        . ,r))
                   example1)))
  
  (test-case 
   "With supplied headers"
   (parameterize
      ([th-width 14]
       [td-width 12])
     (check-equal? (format-table '(A B Naglowek D E)
                                 `("Waiting time"    . ,r)
                                 `("Remaining tasks" . ,r)
                                 `("Priority"        . ,r))
                   example2))))